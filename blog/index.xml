<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog section on Bitrat Tech</title>
    <link>https://bitrat.tech/blog/</link>
    <description>Recent content in Blog section on Bitrat Tech</description>
    <generator>Hugo</generator>
    <language>en-GB</language>
    <lastBuildDate>Sat, 08 Feb 2025 17:30:00 +1300</lastBuildDate>
      <atom:link href="https://bitrat.tech/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Workflow for Disability Disrupters Podcast using Descript</title>
      <link>https://bitrat.tech/blog/disability-disrupters-workflow/</link>
      <pubDate>Sat, 08 Feb 2025 17:30:00 +1300</pubDate>
      <guid>https://bitrat.tech/blog/disability-disrupters-workflow/</guid>
      <description>&lt;h1 id=&#34;workflow-steps&#34;&gt;Workflow steps&lt;/h1&gt;&#xA;&lt;p&gt;Pre-requisites for getting the episode completed:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interviewee bio&lt;/li&gt;&#xA;&lt;li&gt;Edited Episode audio&lt;/li&gt;&#xA;&lt;li&gt;Edited Episode transcript (for deaf and deafblind)&lt;/li&gt;&#xA;&lt;li&gt;Dr Pam&amp;rsquo;s intro and outro&lt;/li&gt;&#xA;&lt;li&gt;Runsheet for what Adverts to include&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;setup-zoom-meeting&#34;&gt;Setup Zoom meeting&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Zoom meet settings need to be: auto record, set to cloud, people can join anytime&lt;/li&gt;&#xA;&lt;li&gt;Once interview finished, wait for recording to process&lt;/li&gt;&#xA;&lt;li&gt;Download the RAW audio files from Zoom as a backup (&amp;ldquo;RAW&amp;rdquo; folder)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;descript&#34;&gt;Descript&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create new audio Project in &amp;ldquo;Interviews&amp;rdquo; folder &amp;ldquo;Episode x - Interview with &amp;lt;Name&amp;gt;&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;RAW interview file - Import audio from Zoom into Descript directly (or download and import each speaker audio separately)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Select &amp;ldquo;Transcribe&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;add speaker labels &amp;lt;v Dr Pam&amp;gt;&lt;strong&gt;nospace&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Edit transcript&lt;/li&gt;&#xA;&lt;li&gt;At end of audio get rid of &amp;ldquo;anything else&amp;rdquo; question (if this makes sense)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Apply Studio Sound (if necessary, otherwise skip this step)&lt;/li&gt;&#xA;&lt;li&gt;Move Interview from &amp;ldquo;Interviews&amp;rdquo; folder into &amp;ldquo;Interviews\Edited interviews&amp;rdquo; folder&lt;/li&gt;&#xA;&lt;li&gt;In &amp;ldquo;Template-Projects&amp;rdquo; folder - Duplicate appropriate project template then Move it to &amp;ldquo;Episodes\In Progress&amp;rdquo; folder - re-name to &amp;ldquo;Episode x - Interview with &amp;lt;Name&amp;gt;&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;From the &amp;ldquo;Interviews\Edited interviews&amp;rdquo; folder - Open edited interview then copy text &amp;amp; paste edited interview audio (do not transcribe) below &amp;ldquo;Interview&amp;rdquo; marker&lt;/li&gt;&#xA;&lt;li&gt;Make sure background music in correct place (in Layer)&lt;/li&gt;&#xA;&lt;li&gt;Double-check title of entire script is &amp;ldquo;Episode x -Interview with &amp;lt;Name&amp;gt;&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Rename the &amp;ldquo;Interview&amp;rdquo; marker in the Transcript to &amp;ldquo;Interview with &amp;lt;Name&amp;gt;&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Move Interview from &amp;ldquo;Interviews\Edited Interviews&amp;rdquo; to &amp;ldquo;used-in-a-script&amp;rdquo; folder&lt;/li&gt;&#xA;&lt;li&gt;add Dr Pam&amp;rsquo;s intro, transcribe and edit&#xA;&lt;ul&gt;&#xA;&lt;li&gt;adjust audio boundaries on timeline (insert gap, make sure audio in full for each section)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;add Dr Pam&amp;rsquo;s outro, transcribe and edit&#xA;&lt;ul&gt;&#xA;&lt;li&gt;adjust audio boundaries on timeline (insert gap, make sure audio in full for each section)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Open interview from &amp;ldquo;Interviews\Edited Interviews\Used-in-a-script&amp;rdquo;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Check Markers are properly labelled&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Publish - Export - subtitles - edit Episode in Librewriter (check &amp;lt;v speaker&amp;gt; tags)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Name vtt file &amp;ldquo;Episode x - Interview with &amp;lt;Name&amp;gt;&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Run Auto-tag py script (to add the speaker labels that are missing in vtt file)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Publish - Export - audio mp3 - name it EditedInterview&#xA;&lt;ul&gt;&#xA;&lt;li&gt;include markers&lt;/li&gt;&#xA;&lt;li&gt;check size of audio is less than 135 MB (pinecast plan limit)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;test-podcast-episodes-folder&#34;&gt;test-Podcast-Episodes folder&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Place edited audio and transcripts into that folder&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;produce-timetext-markers-for-pinecast-show-notes-section&#34;&gt;Produce time/text markers for Pinecast show notes section&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Upload edited audio to &lt;a href=&#34;https://mp3chapters.github.io/&#34;&gt;https://mp3chapters.github.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Copy markers&lt;/li&gt;&#xA;&lt;li&gt;paste into pinecast Episode Notes (see below), or keep a copy of these for later&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;pinecast&#34;&gt;Pinecast&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Title &amp;ldquo;Interview with &amp;hellip; &amp;quot;&lt;/li&gt;&#xA;&lt;li&gt;Upload audio mp3&lt;/li&gt;&#xA;&lt;li&gt;tick &amp;ldquo;don&amp;rsquo;t upload art work&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Choose 1st of Month 12:01 AM&lt;/li&gt;&#xA;&lt;li&gt;Get rid of Episode Notes title&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Paste show notes (interviewee bios)&lt;/li&gt;&#xA;&lt;li&gt;Paste Text Markers (2 spaces at end of line)&lt;/li&gt;&#xA;&lt;li&gt;Add Footnote credits&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;tick link to transcript&lt;/li&gt;&#xA;&lt;li&gt;tick link to tip jar&lt;/li&gt;&#xA;&lt;li&gt;Save Episode&lt;/li&gt;&#xA;&lt;li&gt;Upload episode transcript file&lt;/li&gt;&#xA;&lt;li&gt;Speaker A - go into edit mode on transcript text, and change Speaker A combo box to the correct speaker&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;after-episode-has-been-published-after-8-hours&#34;&gt;After Episode has been published (after 8 hours)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;check Apple podcasts (markers good ?)&lt;/li&gt;&#xA;&lt;li&gt;check DRNZ website (episode on episode lists page ?)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>vtt-Autotag-Tool python script for Descript exported subtitle .vtt files</title>
      <link>https://bitrat.tech/blog/vtt-autotag-tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bitrat.tech/blog/vtt-autotag-tool/</guid>
      <description>&lt;p&gt;Apps like Descript, when you export .vtt subtitle files, will not tag the speakers on every 42 character line.&#xA;For a Disability podcast that must have captions and transcriptions avaiolable for each Episode, this missing feature for Descript is a major manual time waster per Episode (Feb 2025, here&amp;rsquo;s where the bug request was lodged, upvote, so we don;t have to do these crazy hacks)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;This lack of true 42 character voice tagging, creates issues with podcast subtitle files, if you want to use it for transcripts in Pinecast (a podcast distributor).&#xA;The python script I created solves my own problem, of spending 1 to 2 hours per Episode having to auto-tag the vtt file every time the speaker switches.&#xA;This has made a 1-2 hour job in my current workflow into a 5 minute one, which is why I am sharing the process and the script.&#xA;&lt;p&gt;&#xA;NOTE: this python script is supplied, as is (it works for me, feel free to mod for your own use)&#xA;&lt;p&gt;&#xA;##Pre-requisites&#xA;* The Descript speakers need to be labelled **&amp;lt;v SPEAKERNAME&amp;&amp;gt;**  (the python script looks for **&amp;lt;v** to change speaker tags where they are missing, this made the python script simpler for me to construct)&#xA;&#x9;* Basically, when you import speaker audio into Descript and transcribe, name that speaker **&amp;lt;v SPEAKERNAME&amp;&amp;gt;**&#xA;* Install python on your PC&#xA;* Create a folder to contain the vtt-auto.py script &#xA;* Add your .vtt file (exported from Descript - with 42 character setting) into the same folder as vtt-auto.py script&#xA;&#x9;* rename your .vtt input file to **IN-EpX.vtt**&#xA;* run the pythion script from the same folder that the IN-EpX.vtt in&#xA;&#x9;* py .\vtt-AutoTag-Tool.py&#xA;# vtt-AutoTag-Tool.py script&#xA;[The python script and a test .vtt file](https://github.com/bitrat/bitrat-blog-starter/tree/main/vtt-Autotag) (an actual Descript .vtt exported file that shows the issue the script will solve) can be downloaded from my repository on github&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;vtt-Autotag-Tool.py&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;import re&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;from shutil import move&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x = &amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;currentTag = &amp;#34;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestPerson&lt;/span&gt;&amp;gt;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filename = &amp;#39;./IN-Epx.vtt&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filename2 = &amp;#39;./OUT-Epx.vtt&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#with open(filename, &amp;#34;r&amp;#34;) as finput, open(filename2, &amp;#34;w&amp;#34;) as foutput:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fileIn = open(filename, &amp;#34;r&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readLines = fileIn.readlines()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&amp;#34;readlines :&amp;#34;,readLines)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fileOut = open(filename2, &amp;#39;w&amp;#39;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;line_count = 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;digit_line = 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;for line in readLines:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    line_count += 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    #print(line_count,line)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(line)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    if line[0:2].isdigit():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        digit_line=line_count&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        #print(digit_line)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    if (line_count == digit_line+1):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        #print(line)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        #print(&amp;#34;1 line after digits&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        try:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            #x = re.search(r&amp;#34;^\&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[^\(]*[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&amp;#34;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;x &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;re.search(r&amp;#34;^\&amp;lt;v[^\(]*[&lt;/span&gt;&amp;gt;]&amp;#34;, line)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            #print(&amp;#39;x: &amp;#39;,x.group(0))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            currentTag = x.group(0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            fileOut.write(line)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        except AttributeError:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            out = currentTag+line  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            fileOut.write(out)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            #print(&amp;#39;foutx: &amp;#39;,out)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    else:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fileOut.write(line)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fileIn.close()     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fileOut.close() &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# writing to file an array of values L = [&amp;#34;Geeks\n&amp;#34;, &amp;#34;for\n&amp;#34;, &amp;#34;Geeks\n&amp;#34;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#fileOut.writelines(L)       &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;</description>
    </item>
  </channel>
</rss>
